%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 1042
%%HiResBoundingBox: 0 0 2391.1199 1041.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 1041.12 re
W
q
[0.24 0 0 -0.24 0 1041.12] cm
q
0 0 9962.5 4337.5 re
W*
q
[4.082345 0 0 4.080969 -271.36215 127.837494] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
855.91498 425.49701 m
854.85297 363.89301 845.71198 323.54102 845.34296 321.94 c
832.71497 264.76401 810.81897 215.20999 780.26196 174.65401 c
755.70795 142.06601 725.57294 115.224007 690.69397 94.875008 c
636.05597 62.999008 587.55597 57.265007 578.37 56.437008 c
563.77899 51.013008 548.89801 46.952007 533.76001 44.291008 c
493.67603 37.244007 451.849 39.904007 409.43701 52.199009 c
337.68301 73.000008 289.60101 113.797012 287.58902 115.52401 c
287.30902 115.77401 l
235.5 163.729996 196.57001 222.595 171.599 290.733 c
151.692993 345.04901 140.584991 405.31201 138.584 469.84802 c
135.184006 579.479 158.934998 662.40601 159.947006 665.88202 c
160.484009 665.72601 l
159.791016 674.26904 159.387009 684.10999 159.608002 694.97302 c
160.315994 729.82202 167.875 782.26001 199.834 834.40302 c
203.127 841.04803 235.039 902.57202 299.93799 930.17303 c
300.672 930.48602 l
301.44598 930.677 l
302.20297 930.86499 317.88397 934.672 341.87 934.672 c
345.75699 934.672 349.86499 934.57098 354.16 934.34003 c
381.465 932.86804 421.88 925.55804 461.80099 899.52704 c
481.15698 921.29102 505.03299 937.93402 532.33099 948.27502 c
552.44702 955.89502 573.63501 959.75903 595.30298 959.75903 c
638.57098 959.75903 681.43597 944.71204 719.26599 916.24603 c
757.586 887.41205 787.28796 847.229 805.16296 800.04303 c
823.43597 751.802 827.52496 700.87006 817.31995 653.69104 c
850.91302 566.59802 856.883 481.668 855.91498 425.49701 c
h
415.543 809.40802 m
415 809.586 414.45898 809.76801 413.90799 809.92603 c
409.87198 811.07605 405.66898 811.66003 401.41498 811.66003 c
385.82199 811.66003 369.17999 803.83203 354.55298 789.61902 c
339.06998 774.57501 326.82898 753.26501 320.08398 729.61304 c
312.36099 702.53302 312.35199 675.13806 320.05698 652.47705 c
327.32199 631.10706 340.59698 616.69403 357.43497 611.89203 c
361.47098 610.742 365.67398 610.15802 369.92798 610.15802 c
385.52097 610.15802 402.16296 617.98602 416.79099 632.19904 c
421.44897 636.72504 425.80298 641.83105 429.81 647.38702 c
428.55099 650.38904 427.33899 653.41901 426.17999 656.48102 c
407.05301 706.97198 403.465 760.41101 415.543 809.40802 c
h
439.31201 627.078 m
436.56201 623.82703 433.70001 620.74298 430.72803 617.85498 c
412.34702 599.995 390.75403 590.15796 369.92804 590.15796 c
363.81903 590.15796 357.77005 590.99994 351.95004 592.65997 c
328.61304 599.31396 310.56104 618.271 301.12103 646.039 c
292.12003 672.51599 292.02304 704.14301 300.85004 735.09802 c
308.53903 762.06201 322.66104 786.51904 340.61505 803.96301 c
358.99606 821.823 380.58804 831.66003 401.41504 831.66003 c
407.52405 831.66003 413.57303 830.81805 419.39304 829.15802 c
419.98804 828.98804 420.57303 828.797 421.16104 828.61102 c
421.58603 829.86102 422.01004 831.112 422.45703 832.354 c
429.19403 851.08002 438.11102 868.16699 448.91602 883.34003 c
443.31702 886.18604 437.46802 888.50305 431.38602 890.237 c
422.617 892.737 413.50601 894.005 404.30301 894.005 c
339.883 894.005 275.745 833.05798 251.79901 749.08502 c
223.82602 650.99103 258.87201 554.70203 329.923 534.44 c
338.69202 531.94 347.80402 530.672 357.00601 530.672 c
395.61902 530.672 434.12 552.58398 463.936 588.211 c
454.70001 600.29999 446.45901 613.29999 439.31201 627.078 c
h
294.61801 355.29099 m
289.418 371.90799 285.58801 388.23398 282.798 403.87198 c
197.19101 391.80798 l
209.229 325.63397 236.06001 250.21799 293.64301 193.20998 c
294.061 192.79498 336.18402 151.52597 399.742 130.937973 c
449.59201 114.79097 497.92499 115.45697 544.28802 132.807968 c
477.67502 148.883972 422.42902 177.14597 379.76703 217.04297 c
340.47501 253.786 311.827 300.29901 294.61801 355.29099 c
h
191.91499 572.81403 m
188.974 546.10901 185.82999 500.91504 189.84499 449.07904 c
190.76199 437.23105 192.09499 424.64304 193.97899 411.55203 c
279.75 423.63904 l
273.49399 471.66904 276.599 510.75104 278.564 527.40106 c
267.81601 529.44806 254.68799 532.83807 241.17799 538.46307 c
220.877 546.91803 204.36099 558.48901 191.91499 572.81403 c
h
476.94101 572.53601 m
471.75601 566.52502 466.32202 560.854 460.64902 555.58899 c
429.44101 526.625 392.63303 510.67398 357.005 510.67398 c
345.94699 510.67398 334.98999 512.19897 324.43799 515.20898 c
316.43799 517.48999 308.784 520.586 301.50998 524.42401 c
300.66699 524.47504 299.62198 524.54803 298.41199 524.64899 c
295.845 501.90799 291.01498 433.77197 313.70398 361.26498 c
350.35297 244.14699 438.185 172.00198 574.76898 146.774979 c
596.27698 158.473984 617.323 173.89798 637.85596 193.04298 c
641.31793 197.11098 673.50598 235.75299 698.22095 293.60999 c
721.13593 347.25598 741.73694 428.25299 713.46594 514.47498 c
708.76196 512.20197 703.94397 510.12097 699.00995 508.25198 c
678.89294 500.63199 657.70496 496.76797 636.03595 496.76797 c
592.77197 496.76797 549.90698 511.81497 512.07495 540.28296 c
499.37701 549.83698 487.63101 560.646 476.94101 572.53601 c
h
747.32501 424.13 m
776.73804 419.58002 l
775.70203 459.97803 767.86206 500.44403 753.20703 540.797 c
746.30505 534.75897 738.97803 529.26697 731.25403 524.36902 c
742.29797 492.15201 747.67798 458.56299 747.32501 424.13 c
h
768.80298 556.16498 m
785.79199 512.117 795.04498 467.34399 796.44897 422.54797 c
836.00397 438.16098 l
835.88696 486.30899 830.20697 552.12 807.71399 621.03198 c
798.37701 596.23401 785.19299 574.375 768.80298 556.16498 c
h
680.61499 112.151001 m
755.19397 155.660995 804.04602 227.696 825.83301 326.341 c
825.91901 326.71301 833.96301 362.228 835.68799 416.535 c
796.521 401.07501 l
796.37897 395.349 796.112 389.62402 795.71198 383.90302 c
792.38397 336.20502 780.14294 288.66101 759.32599 242.59302 c
723.93896 164.278015 676.539 117.865021 674.539 115.928017 c
674.24402 115.654015 l
667.146 109.313011 659.93402 103.373016 652.62 97.821014 c
661.61798 101.821999 671.02197 106.554001 680.61499 112.151001 c
h
158.574005 470.46701 m
161.606003 372.69299 188.74001 234.38 300.73499 130.597015 c
303.41498 128.341019 349.073 90.52002 415.00397 71.407013 c
504.96097 45.328011 587.63995 65.185013 660.74896 130.415009 c
663.43195 133.063004 708.13098 177.86002 741.10193 250.828 c
763.30493 299.966 775.16492 349.58398 776.6889 399.349 c
746.4679 404.02399 l
746.32092 402.039 746.16089 400.05298 745.97687 398.06299 c
742.54584 361.11798 732.66687 323.33099 716.61487 285.75098 c
689.36188 221.95097 654.10187 181.22897 652.61487 179.52597 c
652.2829 179.14697 l
651.91388 178.80197 l
608.43188 138.14798 561.73389 112.81797 513.11987 103.514969 c
474.06189 96.04097 433.84286 98.865967 393.57788 111.909973 c
325.53488 133.951965 281.40689 177.17596 279.56689 179.00098 c
244.28889 213.92598 216.88989 258.01996 198.1299 310.05698 c
183.22389 351.40497 173.7139 397.83298 169.8649 448.05298 c
164.052902 523.888 172.8139 584.388 175.1819 598.79102 c
172.8159 603.95703 170.8259 609.35101 169.22791 614.96802 c
163.110992 580.50702 156.755005 529.13 158.574005 470.46701 c
h
353.81299 914.32703 m
328.79797 915.76501 310.668 912.22302 306.957 911.42102 c
247.405 885.66699 217.90399 825.83502 217.61801 825.242 c
217.39301 824.77502 l
217.12201 824.33405 l
187.46802 776.14606 180.36101 727.55902 179.621 695.28308 c
178.812 660.03809 185.194 635.94208 185.255 635.71606 c
185.42201 635.10504 l
185.51001 634.47803 l
190.55602 598.59204 211.69801 572.57404 248.34601 557.14703 c
255.03101 554.33405 261.65802 552.13904 267.897 550.41803 c
254.45401 564.91901 243.483 583.01605 235.565 604.16205 c
218.76601 649.02502 217.702 702.44104 232.567 754.57007 c
245.401 799.57709 269.58499 840.24707 300.66101 869.09106 c
324.448 891.16809 351.49002 905.67407 378.78201 911.32904 c
369.621 913.00403 361.186 913.90302 353.81299 914.32703 c
h
444.88199 663.565 m
478.14398 575.76001 554.96301 516.76599 636.03796 516.76599 c
655.27795 516.76599 674.08197 520.19397 691.92798 526.95398 c
706.914 532.63098 720.58301 540.43396 732.81598 549.97699 c
732.20599 549.96802 731.599 549.94598 730.987 549.94598 c
697.55701 549.94598 662.80402 562.22498 630.48401 585.45697 c
597.90198 608.87695 570.18402 641.83295 550.328 680.76196 c
524.82001 730.77094 515.04602 785.16394 522.80499 833.922 c
530.52496 882.43298 554.62799 919.836 590.83398 939.68896 c
573.15295 939.19897 555.87695 935.80597 539.41699 929.57098 c
445.242 893.896 402.83401 774.56702 444.88199 663.565 c
h
786.46002 792.95801 m
759.27905 864.70898 703.01105 917.21399 639.104 934.01801 c
626.349 932.75598 614.28003 929.263 603.112 923.56702 c
570.974 907.17499 549.46802 874.22302 542.55499 830.77899 c
535.45599 786.16901 544.54297 736.11902 568.14398 689.84998 c
604.724 618.13196 670.16602 569.94696 730.987 569.94696 c
739.92499 569.94696 748.56897 570.99994 756.85699 573.07599 c
802.95898 627.23401 817.01703 712.28998 786.46002 792.95801 c
h
f
746.125 633.48199 m
735.85901 627.44098 724.23602 624.37799 711.57898 624.37799 c
670.97296 624.37799 626.336 655.646 597.85999 704.03497 c
579.82001 734.69 570.63696 768.24695 572.00201 798.52295 c
573.43903 830.38196 586.28503 855.02197 608.17603 867.90393 c
618.44202 873.94495 630.065 877.00793 642.72205 877.00793 c
683.32806 877.00793 727.96503 845.73993 756.44104 797.35095 c
774.48102 766.69592 783.66406 733.13898 782.29901 702.86298 c
780.862 671.00403 768.01599 646.36401 746.125 633.48199 c
h
739.20398 787.20898 m
714.63599 828.95801 675.862 857.00897 642.72198 857.00897 c
633.67999 857.00897 625.46997 854.875 618.32001 850.66797 c
602.45801 841.33295 593.10303 822.495 591.98199 797.62299 c
590.79102 771.16998 599 741.53497 615.09698 714.17798 c
639.66498 672.42896 678.43896 644.37799 711.57898 644.37799 c
720.62097 644.37799 728.83099 646.51196 735.98096 650.71899 c
751.84296 660.05402 761.19794 678.89197 762.31897 703.76398 c
763.51099 730.21698 755.302 759.85199 739.20398 787.20898 c
h
f
Q
q
[64.370377 0 0 64.348694 3757.698 487.35141] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
26.4 12.16 m
25.199999 12.4 24.32 13.44 22.200001 16.959999 c
8.64 39.360001 l
13.120001 39.360001 l
21.240002 39.360001 23.68 37.760002 26.080002 31.560001 c
26.240002 31.560001 l
24.960001 40 l
0.800001 40 l
2.040001 39.48 3.480001 37.759998 5.800001 33.919998 c
18.720001 12.639998 l
14.760001 12.639998 l
7.200001 12.639998 4.840001 14.279998 2.360002 20.519997 c
2.200002 20.519997 l
3.480001 11.999996 l
26.400002 11.999996 l
26.400002 12.159996 l
26.4 12.16 l
h
48.040001 36.080002 m
48.240002 36.240002 l
47.040001 38.480003 43.800003 40.280003 39.560001 40.280003 c
33.16 40.280003 28.800001 36.320004 28.800001 30.600002 c
28.800001 24.160002 34.360001 20.360003 40.32 20.360003 c
48.959999 20.360003 49.68 28.880003 44.559998 28.880003 c
33.999996 28.880003 l
34.079998 34.560001 37.319996 38.320004 42.119995 38.320004 c
44.039993 38.320004 46.799995 37.720005 48.039993 36.080002 c
48.040001 36.080002 l
h
39 21 m
36.279999 21 34.16 23.719999 34 28.200001 c
42.040001 28.120001 l
44.760002 28.08 43.639999 21 39 21 c
h
71.480003 38.720001 m
72.040001 39.080002 73.080002 39.360001 73.720001 39.440002 c
73.720001 39.600002 l
66.400002 40.200001 l
66.400002 36.720001 l
64.520004 38.200001 61.360001 40.280003 57.68 40.280003 c
55.279999 40.280003 51.880001 39.040001 51.880001 33.000004 c
51.880001 24.400003 l
51.880001 22.240004 51.52 21.480003 49.720001 20.680004 c
49.720001 20.600004 l
57.200001 20.600004 l
56.959999 23.360004 l
56.959999 32.920006 l
56.959999 37.400005 58.559998 38.400005 60.32 38.400005 c
62.880001 38.400005 64.800003 37.040005 66.400002 35.760006 c
66.400002 24.400005 l
66.400002 22.240005 66.040001 21.480005 64.239998 20.680006 c
64.239998 20.600006 l
71.720001 20.600006 l
71.480003 23.360006 l
71.480003 38.720005 l
71.480003 38.720001 l
h
83.68 40.279999 m
80.599998 40.279999 77.32 39.239998 75.720001 37.919998 c
78.239998 33.839996 l
78.32 33.839996 l
78.199997 37.319996 81.879997 39.599998 85.199997 39.599998 c
87.599998 39.599998 88.68 38.48 88.68 36.599998 c
88.68 34.16 86.879997 33.039997 83.480003 32.559998 c
77.360001 31.759998 76.120003 28.359997 76.120003 26.119997 c
76.120003 22.519997 79.480003 20.359997 84.160004 20.359997 c
87.320007 20.359997 89.800003 21.359997 91.280006 22.719997 c
88.560005 26.479998 l
88.480003 26.479998 l
88.720001 23.279997 85.639999 20.959997 82.720001 20.959997 c
80.080002 20.959997 79.639999 22.759996 79.639999 23.839996 c
79.639999 26.359997 81.839996 27.279997 84.559998 27.759996 c
89.119995 28.559996 91.839996 30.599997 91.839996 33.959995 c
91.839996 37.599995 88.639999 40.279995 83.679993 40.279995 c
83.68 40.279999 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
